


import qupath.ext.stardist.StarDist2D
import qupath.opencv.ops.ImageOps
import qupath.lib.regions.RegionRequest
import qupath.lib.images.ImageData
import qupath.lib.scripting.QP
import javafx.application.Platform
import javax.swing.JFileChooser
import java.nio.file.Paths


def defaultWin = "C:/Users/shuningliu/Desktop/stardist/dsb2018.pb"
def defaultMac = Paths.get(System.getProperty("user.home"), "Desktop", "stardist", "dsb2018.pb").toString()
File mf = new File(defaultMac).exists() ? new File(defaultMac) : new File(defaultWin)
String modelPath = mf.exists() ? mf.getAbsolutePath() : null
if (modelPath == null) {
    def chooser = new JFileChooser()
    chooser.setDialogTitle("Select dsb2018.pb model")
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        modelPath = chooser.getSelectedFile().absolutePath
    } else {
        print "ERROR: No model selected – aborting."
        return
    }
}
print "Using model: $modelPath"


def imageData = getCurrentImageData()
def annots = getSelectedObjects()
if (annots.isEmpty()) {
    print "ERROR: No annotation selected. Draw or select one first."
    return
}
def annotation = annots[0]


def request = RegionRequest.createInstance(
    imageData.getServer().getPath(),
    1.0,
    [annotation.getROI()]
)


def stains = imageData.getColorDeconvolutionStains()
def stardist = StarDist2D.builder(modelPath)
        .preprocess(
            // 1) Deconvolution to separate DAB
            ImageOps.Channels.deconvolve(stains),
            // 2) Extract DAB channel
            ImageOps.Channels.extract(0),
            // 3) Gaussian blur (σ=1)
            ImageOps.Filters.gaussianBlur(1.0),
            // 4) Median filter (radius=2)
            ImageOps.Filters.median(2),
            // 5) Morphological opening (radius=2)
            ImageOps.Filters.opening(2),
            // 6) Morphological closing (radius=2)
            ImageOps.Filters.closing(2)
        )
        .threshold(0.5)
        .normalizePercentiles(1, 99)
        .pixelSize(1.0)
        .cellExpansion(5.0)
        .measureShape()
        .measureIntensity()
        .includeProbability(false)
        .build()


stardist.detectObjects(imageData, [annotation])
stardist.close()


getCellObjects().each { cell ->
    def m   = cell.getMeasurementList()
    def dab = m.get("Nucleus: DAB OD mean")
    def hem = m.get("Nucleus: Hematoxylin OD mean")
    def ratio = (dab + 0.01)/(hem + 0.01)
    m.put("DAB/Hema Ratio", ratio)
    if      (dab > 0.5)  cell.setName("3+")
    else if (dab > 0.3)  cell.setName("2+")
    else if (dab > 0.15) cell.setName("1+")
    else                 cell.setName("Negative")
}


def resultsDir  = QP.buildFilePath(QP.PROJECT_BASE_DIR, 'results'); mkdirs(resultsDir)
def resultsPath = QP.buildFilePath(resultsDir, getProjectEntry().getImageName() + '_cells.csv')
saveCellMeasurements(resultsPath)
print "Done — results saved to: $resultsPath"


QP.fireHierarchyUpdate()
Platform.runLater {
    // Use Commands to open the measurement table on the JavaFX thread
    def gui = qupath.lib.gui.scripting.QPEx.getQuPath()
    qupath.lib.gui.commands.Commands.showCellMeasurementTable(gui, getCurrentImageData())
}
