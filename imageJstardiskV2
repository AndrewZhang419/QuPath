// === Imports ===
import qupath.ext.stardist.StarDist2D
import qupath.opencv.ops.ImageOps
import qupath.lib.regions.RegionRequest
import qupath.lib.images.ImageData
import qupath.imagej.tools.IJTools
import qupath.imagej.images.servers.ImageJServerBuilder
import ij.IJ
import ij.ImagePlus
import javax.swing.JFileChooser
import java.nio.file.Paths

// === Model file selection ===
def defaultWin = "C:/Users/shuningliu/Desktop/stardist/dsb2018.pb"
def defaultMac = Paths.get(System.getProperty("user.home"), "Desktop", "stardist", "dsb2018.pb").toString()
File mf = new File(defaultMac).exists() ? new File(defaultMac) : new File(defaultWin)
String modelPath
if (!mf.exists()) {
    print "Could not find dsb2018.pb"
    def chooser = new JFileChooser()
    chooser.setDialogTitle("Select dsb2018.pb model")
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        mf = chooser.getSelectedFile()
        modelPath = mf.getAbsolutePath()
    } else {
        print "ERROR: No model selected – aborting."
        return
    }
} else {
    modelPath = mf.getAbsolutePath()
}
print "Using model: $modelPath"

// === Grab current image & annotation ===
def imageData = getCurrentImageData()
def annots = getSelectedObjects()
if (annots.isEmpty()) {
    print "ERROR: No annotation selected. Please draw/select a rectangle."
    return
}
def annotation = annots[0]

// === Build RegionRequest at 0.5× downsampling ===
def request = RegionRequest.createInstance(imageData.getServer().getPath(), 0.5, [annotation.getROI()])

// === Extract ROI to ImagePlus & calibrate ===
ImagePlus imp = IJTools.extractHyperstack(imageData.getServer(), request)
IJTools.calibrateImagePlus(imp, request, imageData.getServer())

// === ImageJ preprocessing filters ===
IJ.run(imp, "Gaussian Blur...", "sigma=1")
IJ.run(imp, "Unsharp Mask...", "radius=2 mask=0.6")
IJ.run(imp, "Subtract Background...", "rolling=50")
IJ.run(imp, "Enhance Local Contrast (CLAHE)", "block=127 histogram=256 maximum=3 mask=*None*")
IJ.run(imp, "Median...", "radius=2")

// === Save processed ROI to temp TIFF and reopen as ImageServer ===
def tmpFile = File.createTempFile("qupath_processed_", ".tif")
IJ.save(imp, tmpFile.getAbsolutePath())
def serverProcessed = new ImageJServerBuilder().buildServer(tmpFile.toURI())
def processedData = new ImageData(serverProcessed, imageData.getHierarchy())

// === Configure and run StarDist on processed image ===
def stains = processedData.getColorDeconvolutionStains()
def stardist = StarDist2D.builder(modelPath)
        .preprocess(
            ImageOps.Channels.deconvolve(stains),
            ImageOps.Channels.extract(0)
        )
        .threshold(0.5)
        .normalizePercentiles(1,99)
        .pixelSize(0.5)
        .cellExpansion(5.0)
        .measureShape()
        .measureIntensity()
        .includeProbability(false)
        .build()
stardist.detectObjects(processedData, [annotation])
stardist.close()

// === Compute DAB/Hema Ratio, classify, and export CSV ===
getCellObjects().each { cell ->
    def m = cell.getMeasurementList()
    def dab = m.get("Nucleus: DAB OD mean")
    def hem = m.get("Nucleus: Hematoxylin OD mean")
    def ratio = (dab +0.01)/(hem+0.01)
    m.put("DAB/Hema Ratio", ratio)
    if (dab > 0.5) cell.setName("3+")
    else if (dab >0.3) cell.setName("2+")
    else if (dab >0.15) cell.setName("1+")
    else cell.setName("Negative")
}
def resultsDir = buildFilePath(PROJECT_BASE_DIR, 'results'); mkdirs(resultsDir)
def resultsPath = buildFilePath(resultsDir, getProjectEntry().getImageName() + '_cells.csv')
saveCellMeasurements(resultsPath)
print "Done — results saved to:\n  $resultsPath"

// === Refresh overlay and show measurement table ===
getCurrentHierarchy().fireHierarchyUpdate()
runCommand('Show measurement table')
