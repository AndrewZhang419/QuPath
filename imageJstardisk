// Imports
import qupath.ext.stardist.StarDist2D
import qupath.opencv.ops.ImageOps
import qupath.lib.regions.RegionRequest
import javax.swing.JFileChooser
import java.nio.file.Paths

// 1) Locate your single‐channel model (dsb2018.pb) on Windows or macOS
def defaultWin = "C:/Users/shuningliu/Desktop/stardist/dsb2018.pb"
def defaultMac = Paths.get(System.getProperty("user.home"), "Desktop", "stardist", "dsb2018.pb").toString()
File mf = new File(defaultMac).exists() ? new File(defaultMac) : new File(defaultWin)
String modelPath
if (!mf.exists()) {
    print "WARNING: Could not find dsb2018.pb at\n  $defaultMac\n  $defaultWin\nPlease select it…"
    def chooser = new JFileChooser()
    chooser.setDialogTitle("Select dsb2018.pb model")
    if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
        mf = chooser.getSelectedFile()
        modelPath = mf.getAbsolutePath()
    } else {
        print "ERROR: No model selected – aborting."
        return
    }
} else {
    modelPath = mf.getAbsolutePath()
}
print "Using model: $modelPath"

// 2) Grab the current image & your selected annotation (rectangle)
def imageData = getCurrentImageData()
def annots    = getSelectedObjects()
if (annots.isEmpty()) {
    print "ERROR: No annotation selected. Please draw/select a rectangle."
    return
}
def annotation = annots[0]

// 3) Request that region at 0.5× downsample
def request = RegionRequest.createInstance(
    imageData.getServer().getPath(),
    0.5,
    [ annotation.getROI() ]
)

// 4) Build StarDist with a two‐step preprocess: deconvolve → extract hematoxylin
def stains = imageData.getColorDeconvolutionStains()
def stardist = StarDist2D.builder(modelPath)
        .preprocess(
            ImageOps.Channels.deconvolve(stains),
            ImageOps.Channels.extract(0)
        )
        .threshold(0.5)
        .normalizePercentiles(1, 99)
        .pixelSize(0.5)
        .cellExpansion(5.0)
        .measureShape()
        .measureIntensity()
        .includeProbability(false)
        .build()

// 5) Run detection
stardist.detectObjects(imageData, [annotation])
stardist.close()

// 6) Classify by DAB vs Hematoxylin OD using MeasurementList.get(...)
getCellObjects().each { cell ->
    def m   = cell.getMeasurementList()
    def dab = m.get("Nucleus: DAB OD mean")
    def hem = m.get("Nucleus: Hematoxylin OD mean")
    def ratio = (dab + 0.01)/(hem + 0.01)
    m.put("DAB/Hema Ratio", ratio)
    if      (dab > 0.5)  cell.setName("3+")
    else if (dab > 0.3)  cell.setName("2+")
    else if (dab > 0.15) cell.setName("1+")
    else                 cell.setName("Negative")
}

// 7) Save measurements
def resultsDir  = buildFilePath(PROJECT_BASE_DIR, 'results'); mkdirs(resultsDir)
def resultsPath = buildFilePath(resultsDir, getProjectEntry().getImageName() + '_cells.csv')
saveCellMeasurements(resultsPath)

print " Done — results saved to:\n  $resultsPath"
