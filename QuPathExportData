// == Imports ==
import qupath.lib.objects.PathCellObject
import qupath.lib.roi.RectangleROI
import qupath.lib.io.GsonTools
import java.net.URLDecoder

// (1) Strip out unwanted measurements
def allDetections = getDetectionObjects()
def allNames      = allDetections.collectMany {
    it.getMeasurementList().getMeasurementNames()
}.unique()
allNames.each { name ->
    removeMeasurements(PathCellObject, name)
}

// (2) Prepare JSON writer
boolean prettyPrint = false
def gson = GsonTools.getInstance(prettyPrint)

// Decode the file path
def rawPath   = getCurrentImageData().getServer().getPath()
def imagePath = rawPath.split("file:/")[1]
def decodedPA = URLDecoder.decode(imagePath, "UTF-8")

// (3) Loop over rectangle annotations
def rects = getAnnotationObjects().findAll { it.getROI() instanceof RectangleROI }
if (rects.isEmpty()) {
    print '⚠️ No rectangle annotations found – draw one first.'
    return
}

rects.eachWithIndex { ann, idx ->
    def roi = ann.getROI()
    // *** Fixed centroid call here ***
    def inRegion = allDetections.findAll { det ->
        def x = det.getROI().getCentroidX()
        def y = det.getROI().getCentroidY()
        roi.contains(x, y)
    }

    def annName  = ann.getName() ?: "rect${idx+1}"
    def outfname = "${decodedPA}_${annName}.json"

    def outFile = new File(outfname)
    outFile.parentFile?.mkdirs()

    outFile.withWriter('UTF-8') { writer ->
        gson.toJson(inRegion, writer)
    }
    print "✅ Exported ${inRegion.size()} cells for '${annName}' → ${outfname}\n"
}
